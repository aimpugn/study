import org.gradle.internal.impldep.org.junit.platform.launcher.EngineFilter.includeEngines

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // TestNG
    // JUnit 더 다양한 기능들 제공 및 병렬 실행 등을 지원하여 TestNG로 테스팅 라이브러리를 교체합니다.
    //
    // - https://testng.org/#_download
    // - https://mkyong.com/unittest/junit-4-vs-testng-comparison/
    // - https://medium.com/@abhaykhs/testng-vs-junit-an-unbiased-comparison-between-both-testing-frameworks-d2200b5361d0
    testImplementation(libs.testng)

    // TestNG 의존성을 추가하고 수정 후 테스트를 실행하면 다음과 같은 경고가 발생합니다.
    //
    // ```
    // SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
    // SLF4J: Defaulting to no-operation (NOP) logger implementation
    // SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
    // ```
    //
    // 여기서 SLF4J(Simple Logging Facade for Java)는 Java의 로깅 프레임워크입니다.
    // 로깅의 구현이 아닌, 로깅 인터페이스를 제공하는 추상화 레이어로, 개발자가 특정 로깅 구현체(Logback, Log4j, java.util.logging(JUL) 등)에
    // 의존하지 않고 추상화된 로깅 인터페이스를 사용할 수 있도록 합니다.
    // 즉, SLF4J는 인터페이스만 정의하고, 실제 로그 출력 구현체는 포함하지 않으므로 반드시 별도의 구현체가 있어야 합니다.
    //
    // 위의 경고는 로깅 구현체를 찾지 못해 기본적으로 아무 작업도 수행하지 않는(no-operation, NOP) 로거를 사용하겠다는 의미입니다.
    // 실제 로그 출력을 위해 Logback 의존성을 추가합니다.
    // 현재는 테스트 런타임 시에만 사용하므로 testRuntimeOnly로 추가합니다.
    //
    // References:
    // - https://logback.qos.ch/manual/architecture.html
    // - https://logback.qos.ch/reasonsToSwitch.html
    testRuntimeOnly(libs.logback)

    // This dependency is used by the application.
    implementation(libs.guava)
}

// References:
// - https://junit.org/junit5/docs/current/user-guide/#running-tests-build-gradle
// - https://docs.gradle.org/current/userguide/java_testing.html#using_junit5
tasks.test {
    useTestNG()
    testLogging {
        events("passed", "skipped", "failed")
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.App"
}
