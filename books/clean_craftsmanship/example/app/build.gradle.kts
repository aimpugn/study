import org.gradle.internal.impldep.org.junit.platform.launcher.EngineFilter.includeEngines

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // JUnit BOM && Version catalog
    // `platform`은 버전 관리를 위한 BOM(Bill of Materials)을 적용할 때 사용합니다.
    // BOM(Bill of Materials)는 '라이브러리의 버전을 중앙에서 관리하여 일관성 있게 유지'하도록 돕습니다.
    // - 여러 모듈 간의 버전을 일치시켜서 버전 충돌 예방
    // - 다수의 모듈이 공유하는 의존성 라이브러리 간 충돌 최소화
    // - 의존성 그룹을 한번에 관리
    // 복잡한 프로젝트 경우 하위 모듈 간 버전 충돌이 찾아서 BOM을 많이 사용한다고 합니다.
    //
    // References:
    // - https://github.com/junit-team/junit5-samples/blob/46384d00dd3c8f7c1fa8634346c4ea9de7c69f68/junit5-jupiter-starter-gradle-kotlin/build.gradle.kts#L12-L16
    // - https://docs.gradle.org/current/userguide/platforms.html#sec:using-platform-to-control-transitive-deps
    testImplementation(platform(libs.junit.bom))
    // BOM 임포트 후에 버전 없이 의존성을 정의합니다.
    // - https://stackoverflow.com/a/67485811
    testImplementation(libs.junit.jupiter)
    testRuntimeOnly(libs.junit.platform.launcher)
    // - https://junit.org/junit5/docs/current/user-guide/#running-tests-ide-intellij-idea
    testRuntimeOnly(libs.junit.jupiter.engine)
    testRuntimeOnly(libs.junit.vintage.engine)

    // This dependency is used by the application.
    implementation(libs.guava)
}

// References:
// - https://junit.org/junit5/docs/current/user-guide/#running-tests-build-gradle
// - https://docs.gradle.org/current/userguide/java_testing.html#using_junit5
tasks.test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.App"
}
